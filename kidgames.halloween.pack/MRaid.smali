.class Lcom/millennialmedia/android/MRaid;
.super Ljava/lang/Object;
.source "MRaid.java"


# static fields
.field private static final KEY_MMJS_URL:Ljava/lang/String; = "KEY_MMJS_URL"

.field private static final MMJS_1_3_PART1:Ljava/lang/String; = ""

.field private static final MMJS_1_3_PART2:Ljava/lang/String; = ""

.field static final MRAID_JS_FILE_NAME:Ljava/lang/String; = "mraid.js"

.field private static final MRAID_JS_REPLACE_HEAD_PATTERN:Ljava/lang/String; = "<head>"

.field static final MRAID_JS_REPLACE_IDENTIFIER:Ljava/lang/String; = "<script src=\"mraid.js\"></script>"

.field private static final MRAID_JS_REPLACE_PATTERN:Ljava/lang/String; = "<script.*src=[\"|\']mraid\\.js[\"|\']"

.field private static final ORIGINAL_MMJS_URL:Ljava/lang/String; = "http://lp.mydas.mobi/assets/mmjs/1.3/mm.js"

.field static final STATE_DEFAULT:Ljava/lang/String; = "default"

.field static final STATE_EXPANDED:Ljava/lang/String; = "expanded"

.field static final STATE_HIDDEN:Ljava/lang/String; = "hidden"

.field static final STATE_LOADING:Ljava/lang/String; = "loading"


# direct methods
.method constructor <init>()V
    .registers 1

    .prologue
    .line 26
    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    return-void
.end method

.method static downloadMraidJs(Landroid/content/Context;Ljava/lang/String;)V
    .registers 3
    .param p0, "context"    # Landroid/content/Context;
    .param p1, "url"    # Ljava/lang/String;

    .prologue
    .line 86
    invoke-static {p1}, Landroid/text/TextUtils;->isEmpty(Ljava/lang/CharSequence;)Z

    move-result v0

    if-nez v0, :cond_e

    .line 88
    new-instance v0, Lcom/millennialmedia/android/MRaid$1;

    invoke-direct {v0, p1, p0}, Lcom/millennialmedia/android/MRaid$1;-><init>(Ljava/lang/String;Landroid/content/Context;)V

    invoke-static {v0}, Lcom/millennialmedia/android/Utils$ThreadUtils;->execute(Ljava/lang/Runnable;)V

    .line 118
    :cond_e
    return-void
.end method

.method static getMMJSStats(Landroid/content/Context;)Ljava/lang/String;
    .registers 15
    .param p0, "context"    # Landroid/content/Context;

    .prologue
    .line 143
    invoke-static {p0}, Lcom/millennialmedia/android/MRaid;->hasMraidLocally(Landroid/content/Context;)Z

    move-result v9

    if-nez v9, :cond_9

    .line 145
    const-string v9, "No MMJS Downloaded!"

    .line 179
    :goto_8
    return-object v9

    .line 147
    :cond_9
    invoke-static {p0}, Lcom/millennialmedia/android/MRaid;->getMRaidJsFile(Landroid/content/Context;)Ljava/io/File;

    move-result-object v8

    .line 149
    .local v8, "mmjs":Ljava/io/File;
    const/4 v3, 0x0

    .line 150
    .local v3, "fileStream":Ljava/io/FileInputStream;
    const-string v7, ""

    .line 153
    .local v7, "md5Hash":Ljava/lang/String;
    :try_start_10
    new-instance v4, Ljava/io/FileInputStream;

    invoke-direct {v4, v8}, Ljava/io/FileInputStream;-><init>(Ljava/io/File;)V
    :try_end_15
    .catch Ljava/lang/Exception; {:try_start_10 .. :try_end_15} :catch_63
    .catchall {:try_start_10 .. :try_end_15} :catchall_6d

    .line 155
    .end local v3    # "fileStream":Ljava/io/FileInputStream;
    .local v4, "fileStream":Ljava/io/FileInputStream;
    :try_start_15
    invoke-virtual {v8}, Ljava/io/File;->length()J

    move-result-wide v9

    long-to-int v9, v9

    new-array v0, v9, [B

    .line 156
    .local v0, "contents":[B
    invoke-virtual {v4, v0}, Ljava/io/FileInputStream;->read([B)I

    .line 158
    const-string v9, "MD5"

    invoke-static {v9}, Ljava/security/MessageDigest;->getInstance(Ljava/lang/String;)Ljava/security/MessageDigest;

    move-result-object v6

    .line 159
    .local v6, "md":Ljava/security/MessageDigest;
    invoke-virtual {v6, v0}, Ljava/security/MessageDigest;->digest([B)[B

    move-result-object v5

    .line 160
    .local v5, "hashBytes":[B
    invoke-static {v5}, Lcom/millennialmedia/android/MMSDK;->byteArrayToString([B)Ljava/lang/String;
    :try_end_2c
    .catch Ljava/lang/Exception; {:try_start_15 .. :try_end_2c} :catch_79
    .catchall {:try_start_15 .. :try_end_2c} :catchall_76

    move-result-object v7

    .line 170
    if-eqz v4, :cond_32

    .line 171
    :try_start_2f
    invoke-virtual {v4}, Ljava/io/FileInputStream;->close()V
    :try_end_32
    .catch Ljava/lang/Exception; {:try_start_2f .. :try_end_32} :catch_60

    :cond_32
    move-object v3, v4

    .line 178
    .end local v4    # "fileStream":Ljava/io/FileInputStream;
    .end local v5    # "hashBytes":[B
    .end local v6    # "md":Ljava/security/MessageDigest;
    .restart local v3    # "fileStream":Ljava/io/FileInputStream;
    :cond_33
    :goto_33
    new-instance v1, Ljava/util/Date;

    invoke-virtual {v8}, Ljava/io/File;->lastModified()J

    move-result-wide v9

    invoke-direct {v1, v9, v10}, Ljava/util/Date;-><init>(J)V

    .line 179
    .local v1, "date":Ljava/util/Date;
    const-string v9, "MMJS Stats: MD5[%s] Creation[%s] Size[%d] Url[%s]"

    const/4 v10, 0x4

    new-array v10, v10, [Ljava/lang/Object;

    const/4 v11, 0x0

    aput-object v7, v10, v11

    const/4 v11, 0x1

    aput-object v1, v10, v11

    const/4 v11, 0x2

    invoke-virtual {v8}, Ljava/io/File;->length()J

    move-result-wide v12

    invoke-static {v12, v13}, Ljava/lang/Long;->valueOf(J)Ljava/lang/Long;

    move-result-object v12

    aput-object v12, v10, v11

    const/4 v11, 0x3

    invoke-static {p0}, Lcom/millennialmedia/android/HandShake;->sharedHandShake(Landroid/content/Context;)Lcom/millennialmedia/android/HandShake;

    move-result-object v12

    iget-object v12, v12, Lcom/millennialmedia/android/HandShake;->mmjsUrl:Ljava/lang/String;

    aput-object v12, v10, v11

    invoke-static {v9, v10}, Ljava/lang/String;->format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v9

    goto :goto_8

    .line 173
    .end local v1    # "date":Ljava/util/Date;
    .end local v3    # "fileStream":Ljava/io/FileInputStream;
    .restart local v4    # "fileStream":Ljava/io/FileInputStream;
    .restart local v5    # "hashBytes":[B
    .restart local v6    # "md":Ljava/security/MessageDigest;
    :catch_60
    move-exception v9

    move-object v3, v4

    .line 176
    .end local v4    # "fileStream":Ljava/io/FileInputStream;
    .restart local v3    # "fileStream":Ljava/io/FileInputStream;
    goto :goto_33

    .line 162
    .end local v0    # "contents":[B
    .end local v5    # "hashBytes":[B
    .end local v6    # "md":Ljava/security/MessageDigest;
    :catch_63
    move-exception v2

    .line 164
    .local v2, "e":Ljava/lang/Exception;
    :goto_64
    const/4 v0, 0x0

    .line 170
    .restart local v0    # "contents":[B
    if-eqz v3, :cond_33

    .line 171
    :try_start_67
    invoke-virtual {v3}, Ljava/io/FileInputStream;->close()V
    :try_end_6a
    .catch Ljava/lang/Exception; {:try_start_67 .. :try_end_6a} :catch_6b

    goto :goto_33

    .line 173
    :catch_6b
    move-exception v9

    goto :goto_33

    .line 168
    .end local v0    # "contents":[B
    .end local v2    # "e":Ljava/lang/Exception;
    :catchall_6d
    move-exception v9

    .line 170
    :goto_6e
    if-eqz v3, :cond_73

    .line 171
    :try_start_70
    invoke-virtual {v3}, Ljava/io/FileInputStream;->close()V
    :try_end_73
    .catch Ljava/lang/Exception; {:try_start_70 .. :try_end_73} :catch_74

    .line 175
    :cond_73
    :goto_73
    throw v9

    .line 173
    :catch_74
    move-exception v10

    goto :goto_73

    .line 168
    .end local v3    # "fileStream":Ljava/io/FileInputStream;
    .restart local v4    # "fileStream":Ljava/io/FileInputStream;
    :catchall_76
    move-exception v9

    move-object v3, v4

    .end local v4    # "fileStream":Ljava/io/FileInputStream;
    .restart local v3    # "fileStream":Ljava/io/FileInputStream;
    goto :goto_6e

    .line 162
    .end local v3    # "fileStream":Ljava/io/FileInputStream;
    .restart local v4    # "fileStream":Ljava/io/FileInputStream;
    :catch_79
    move-exception v2

    move-object v3, v4

    .end local v4    # "fileStream":Ljava/io/FileInputStream;
    .restart local v3    # "fileStream":Ljava/io/FileInputStream;
    goto :goto_64
.end method

.method private static getMRaidJsFile(Landroid/content/Context;)Ljava/io/File;
    .registers 4
    .param p0, "context"    # Landroid/content/Context;

    .prologue
    .line 133
    new-instance v0, Ljava/io/File;

    invoke-static {p0}, Lcom/millennialmedia/android/AdCache;->getCacheDirectory(Landroid/content/Context;)Ljava/io/File;

    move-result-object v1

    const-string v2, "mraid.js"

    invoke-direct {v0, v1, v2}, Ljava/io/File;-><init>(Ljava/io/File;Ljava/lang/String;)V

    return-object v0
.end method

.method static getMRaidJsPath(Landroid/content/Context;)Ljava/lang/String;
    .registers 2
    .param p0, "context"    # Landroid/content/Context;

    .prologue
    .line 138
    invoke-static {p0}, Lcom/millennialmedia/android/MRaid;->getMRaidJsFile(Landroid/content/Context;)Ljava/io/File;

    move-result-object v0

    invoke-static {v0}, Landroid/net/Uri;->fromFile(Ljava/io/File;)Landroid/net/Uri;

    move-result-object v0

    invoke-virtual {v0}, Landroid/net/Uri;->toString()Ljava/lang/String;

    move-result-object v0

    return-object v0
.end method

.method static hasMraidLocally(Landroid/content/Context;)Z
    .registers 3
    .param p0, "context"    # Landroid/content/Context;

    .prologue
    .line 243
    invoke-static {p0}, Lcom/millennialmedia/android/MRaid;->getMRaidJsFile(Landroid/content/Context;)Ljava/io/File;

    move-result-object v0

    .line 244
    .local v0, "mmjs":Ljava/io/File;
    if-eqz v0, :cond_e

    invoke-virtual {v0}, Ljava/io/File;->exists()Z

    move-result v1

    if-eqz v1, :cond_e

    const/4 v1, 0x1

    :goto_d
    return v1

    :cond_e
    const/4 v1, 0x0

    goto :goto_d
.end method

.method static injectMraidJs(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
    .registers 8
    .param p0, "context"    # Landroid/content/Context;
    .param p1, "content"    # Ljava/lang/String;

    .prologue
    const/4 v5, -0x1

    .line 56
    const-string v3, "<script.*src=[\"|\']mraid\\.js[\"|\']"

    invoke-static {v3}, Ljava/util/regex/Pattern;->compile(Ljava/lang/String;)Ljava/util/regex/Pattern;

    move-result-object v2

    .line 57
    .local v2, "pattern":Ljava/util/regex/Pattern;
    invoke-virtual {v2, p1}, Ljava/util/regex/Pattern;->matcher(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;

    move-result-object v0

    .line 58
    .local v0, "matcher":Ljava/util/regex/Matcher;
    invoke-static {p0}, Lcom/millennialmedia/android/MRaid;->getMRaidJsPath(Landroid/content/Context;)Ljava/lang/String;

    move-result-object v1

    .line 59
    .local v1, "mraid":Ljava/lang/String;
    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string v4, "Mraid path: "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-static {p0}, Lcom/millennialmedia/android/MRaid;->getMRaidJsPath(Landroid/content/Context;)Ljava/lang/String;

    move-result-object v4

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v3}, Lcom/millennialmedia/android/MMSDK$Log;->d(Ljava/lang/String;)V

    .line 60
    invoke-virtual {v0}, Ljava/util/regex/Matcher;->find()Z

    move-result v3

    if-eqz v3, :cond_6e

    .line 62
    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string v4, "<script src=\""

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    const-string v4, "\""

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v0, v3}, Ljava/util/regex/Matcher;->replaceFirst(Ljava/lang/String;)Ljava/lang/String;

    move-result-object p1

    .line 77
    :cond_4c
    :goto_4c
    const-string v3, "<html>"

    invoke-virtual {p1, v3}, Ljava/lang/String;->indexOf(Ljava/lang/String;)I

    move-result v3

    if-ne v3, v5, :cond_6d

    .line 79
    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string v4, "<html><head></head><body style=\'margin:0;padding:0;\'>"

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    const-string v4, "</body></html>"

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object p1

    .line 81
    :cond_6d
    return-object p1

    .line 64
    :cond_6e
    const-string v3, "<head>"

    invoke-virtual {p1, v3}, Ljava/lang/String;->indexOf(Ljava/lang/String;)I

    move-result v3

    if-ne v3, v5, :cond_94

    .line 66
    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string v4, "<script src=\""

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    const-string v4, "\"></script>"

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object p1

    goto :goto_4c

    .line 70
    :cond_94
    const-string v3, "<head>"

    invoke-static {v3}, Ljava/util/regex/Pattern;->compile(Ljava/lang/String;)Ljava/util/regex/Pattern;

    move-result-object v2

    .line 71
    invoke-virtual {v2, p1}, Ljava/util/regex/Pattern;->matcher(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;

    move-result-object v0

    .line 72
    invoke-virtual {v0}, Ljava/util/regex/Matcher;->find()Z

    move-result v3

    if-eqz v3, :cond_4c

    .line 74
    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string v4, "<head><script src=\""

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    const-string v4, "\"></script>"

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v0, v3}, Ljava/util/regex/Matcher;->replaceFirst(Ljava/lang/String;)Ljava/lang/String;

    move-result-object p1

    goto :goto_4c
.end method

.method static isMRaidAd(Ljava/lang/String;)Z
    .registers 4
    .param p0, "content"    # Ljava/lang/String;

    .prologue
    .line 45
    if-nez p0, :cond_4

    .line 46
    const/4 v2, 0x0

    .line 50
    :goto_3
    return v2

    .line 48
    :cond_4
    const-string v2, "<script.*src=[\"|\']mraid\\.js[\"|\']"

    invoke-static {v2}, Ljava/util/regex/Pattern;->compile(Ljava/lang/String;)Ljava/util/regex/Pattern;

    move-result-object v1

    .line 49
    .local v1, "pattern":Ljava/util/regex/Pattern;
    invoke-virtual {v1, p0}, Ljava/util/regex/Pattern;->matcher(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;

    move-result-object v0

    .line 50
    .local v0, "matcher":Ljava/util/regex/Matcher;
    invoke-virtual {v0}, Ljava/util/regex/Matcher;->find()Z

    move-result v2

    goto :goto_3
.end method

.method static isMRaidUpdated(Landroid/content/Context;Ljava/lang/String;)Z
    .registers 10
    .param p0, "context"    # Landroid/content/Context;
    .param p1, "mmjsUrl"    # Ljava/lang/String;

    .prologue
    const/4 v4, 0x1

    const/4 v5, 0x0

    .line 229
    invoke-static {p0}, Lcom/millennialmedia/android/MRaid;->hasMraidLocally(Landroid/content/Context;)Z

    move-result v0

    .line 230
    .local v0, "hasMraidLocally":Z
    if-nez v0, :cond_14

    const-string v6, "http://lp.mydas.mobi/assets/mmjs/1.3/mm.js"

    invoke-virtual {v6, p1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v6

    if-eqz v6, :cond_14

    .line 232
    invoke-static {p0, p1}, Lcom/millennialmedia/android/MRaid;->saveIncludedMMJS(Landroid/content/Context;Ljava/lang/String;)Z

    .line 238
    :cond_13
    :goto_13
    return v4

    .line 235
    :cond_14
    const-string v6, "MillennialMediaSettings"

    invoke-virtual {p0, v6, v5}, Landroid/content/Context;->getSharedPreferences(Ljava/lang/String;I)Landroid/content/SharedPreferences;

    move-result-object v2

    .line 236
    .local v2, "prefs":Landroid/content/SharedPreferences;
    const-string v6, "KEY_MMJS_URL"

    const-string v7, ""

    invoke-interface {v2, v6, v7}, Landroid/content/SharedPreferences;->getString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v3

    .line 237
    .local v3, "previousUrl":Ljava/lang/String;
    invoke-static {v3}, Landroid/text/TextUtils;->isEmpty(Ljava/lang/CharSequence;)Z

    move-result v6

    if-nez v6, :cond_35

    invoke-virtual {v3, p1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v6

    if-eqz v6, :cond_35

    move v1, v4

    .line 238
    .local v1, "isSameUrl":Z
    :goto_2f
    if-eqz v1, :cond_33

    if-nez v0, :cond_13

    :cond_33
    move v4, v5

    goto :goto_13

    .end local v1    # "isSameUrl":Z
    :cond_35
    move v1, v5

    .line 237
    goto :goto_2f
.end method

.method static saveIncludedMMJS(Landroid/content/Context;Ljava/lang/String;)Z
    .registers 9
    .param p0, "context"    # Landroid/content/Context;
    .param p1, "mmjsUrl"    # Ljava/lang/String;

    .prologue
    const/4 v4, 0x0

    .line 249
    const-string v5, ""

    invoke-static {v5}, Lcom/millennialmedia/android/Base64;->decode(Ljava/lang/String;)[B

    move-result-object v1

    .line 250
    .local v1, "mmjsBytesFirst":[B
    const-string v5, ""

    invoke-static {v5}, Lcom/millennialmedia/android/Base64;->decode(Ljava/lang/String;)[B

    move-result-object v2

    .line 251
    .local v2, "mmjsBytesSecond":[B
    if-eqz v1, :cond_2e

    if-eqz v2, :cond_2e

    .line 253
    array-length v5, v1

    array-length v6, v2

    add-int/2addr v5, v6

    new-array v3, v5, [B

    .line 254
    .local v3, "mmjsComplete":[B
    array-length v5, v1

    invoke-static {v1, v4, v3, v4, v5}, Ljava/lang/System;->arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V

    .line 255
    array-length v5, v1

    array-length v6, v2

    invoke-static {v2, v4, v3, v5, v6}, Ljava/lang/System;->arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V

    .line 257
    new-instance v0, Ljava/io/ByteArrayInputStream;

    invoke-direct {v0, v3}, Ljava/io/ByteArrayInputStream;-><init>([B)V

    .line 258
    .local v0, "byteStream":Ljava/io/ByteArrayInputStream;
    invoke-static {p0, v0}, Lcom/millennialmedia/android/MRaid;->saveMRaid(Landroid/content/Context;Ljava/io/InputStream;)Z

    move-result v5

    if-eqz v5, :cond_2e

    .line 260
    invoke-static {p0, p1}, Lcom/millennialmedia/android/MRaid;->storeMraidUrl(Landroid/content/Context;Ljava/lang/String;)V

    .line 261
    const/4 v4, 0x1

    .line 265
    .end local v0    # "byteStream":Ljava/io/ByteArrayInputStream;
    .end local v3    # "mmjsComplete":[B
    :cond_2e
    return v4
.end method

.method static saveMRaid(Landroid/content/Context;Ljava/io/InputStream;)Z
    .registers 13
    .param p0, "context"    # Landroid/content/Context;
    .param p1, "is"    # Ljava/io/InputStream;

    .prologue
    const/4 v6, 0x1

    const/4 v7, 0x0

    .line 185
    new-instance v2, Ljava/io/File;

    invoke-static {p0}, Lcom/millennialmedia/android/AdCache;->getCacheDirectory(Landroid/content/Context;)Ljava/io/File;

    move-result-object v8

    const-string v9, "mraid.js"

    invoke-direct {v2, v8, v9}, Ljava/io/File;-><init>(Ljava/io/File;Ljava/lang/String;)V

    .line 187
    .local v2, "mraidJsFile":Ljava/io/File;
    const-string v8, "Saving mraid js to %s"

    new-array v9, v6, [Ljava/lang/Object;

    aput-object v2, v9, v7

    invoke-static {v8, v9}, Lcom/millennialmedia/android/MMSDK$Log;->v(Ljava/lang/String;[Ljava/lang/Object;)V

    .line 188
    const/4 v4, 0x0

    .line 191
    .local v4, "out":Ljava/io/FileOutputStream;
    :try_start_17
    new-instance v5, Ljava/io/FileOutputStream;

    invoke-direct {v5, v2}, Ljava/io/FileOutputStream;-><init>(Ljava/io/File;)V
    :try_end_1c
    .catch Ljava/lang/Exception; {:try_start_17 .. :try_end_1c} :catch_68
    .catchall {:try_start_17 .. :try_end_1c} :catchall_59

    .line 192
    .end local v4    # "out":Ljava/io/FileOutputStream;
    .local v5, "out":Ljava/io/FileOutputStream;
    const/16 v8, 0x400

    :try_start_1e
    new-array v0, v8, [B

    .line 195
    .local v0, "buf":[B
    :goto_20
    invoke-virtual {p1, v0}, Ljava/io/InputStream;->read([B)I
    :try_end_23
    .catch Ljava/lang/Exception; {:try_start_1e .. :try_end_23} :catch_32
    .catchall {:try_start_1e .. :try_end_23} :catchall_65

    move-result v3

    .line 196
    .local v3, "numread":I
    if-gtz v3, :cond_2d

    .line 212
    if-eqz v5, :cond_2b

    .line 215
    :try_start_28
    invoke-virtual {v5}, Ljava/io/FileOutputStream;->close()V
    :try_end_2b
    .catch Ljava/io/IOException; {:try_start_28 .. :try_end_2b} :catch_4f

    :cond_2b
    :goto_2b
    move-object v4, v5

    .line 222
    .end local v0    # "buf":[B
    .end local v3    # "numread":I
    .end local v5    # "out":Ljava/io/FileOutputStream;
    .restart local v4    # "out":Ljava/io/FileOutputStream;
    :goto_2c
    return v6

    .line 198
    .end local v4    # "out":Ljava/io/FileOutputStream;
    .restart local v0    # "buf":[B
    .restart local v3    # "numread":I
    .restart local v5    # "out":Ljava/io/FileOutputStream;
    :cond_2d
    const/4 v8, 0x0

    :try_start_2e
    invoke-virtual {v5, v0, v8, v3}, Ljava/io/FileOutputStream;->write([BII)V
    :try_end_31
    .catch Ljava/lang/Exception; {:try_start_2e .. :try_end_31} :catch_32
    .catchall {:try_start_2e .. :try_end_31} :catchall_65

    goto :goto_20

    .line 203
    .end local v0    # "buf":[B
    .end local v3    # "numread":I
    :catch_32
    move-exception v1

    move-object v4, v5

    .line 205
    .end local v5    # "out":Ljava/io/FileOutputStream;
    .local v1, "e":Ljava/lang/Exception;
    .restart local v4    # "out":Ljava/io/FileOutputStream;
    :goto_34
    if-eqz v2, :cond_39

    .line 206
    :try_start_36
    invoke-virtual {v2}, Ljava/io/File;->delete()Z

    .line 207
    :cond_39
    const-string v6, "Exception downloading component mraid.js: %s"

    const/4 v8, 0x1

    new-array v8, v8, [Ljava/lang/Object;

    const/4 v9, 0x0

    invoke-virtual {v1}, Ljava/lang/Exception;->getMessage()Ljava/lang/String;

    move-result-object v10

    aput-object v10, v8, v9

    invoke-static {v6, v8}, Lcom/millennialmedia/android/MMSDK$Log;->e(Ljava/lang/String;[Ljava/lang/Object;)V
    :try_end_48
    .catchall {:try_start_36 .. :try_end_48} :catchall_59

    .line 212
    if-eqz v4, :cond_4d

    .line 215
    :try_start_4a
    invoke-virtual {v4}, Ljava/io/FileOutputStream;->close()V
    :try_end_4d
    .catch Ljava/io/IOException; {:try_start_4a .. :try_end_4d} :catch_54

    .end local v1    # "e":Ljava/lang/Exception;
    :cond_4d
    :goto_4d
    move v6, v7

    .line 220
    goto :goto_2c

    .line 217
    .end local v4    # "out":Ljava/io/FileOutputStream;
    .restart local v0    # "buf":[B
    .restart local v3    # "numread":I
    .restart local v5    # "out":Ljava/io/FileOutputStream;
    :catch_4f
    move-exception v1

    .line 219
    .local v1, "e":Ljava/io/IOException;
    invoke-virtual {v1}, Ljava/io/IOException;->printStackTrace()V

    goto :goto_2b

    .line 217
    .end local v0    # "buf":[B
    .end local v3    # "numread":I
    .end local v5    # "out":Ljava/io/FileOutputStream;
    .local v1, "e":Ljava/lang/Exception;
    .restart local v4    # "out":Ljava/io/FileOutputStream;
    :catch_54
    move-exception v1

    .line 219
    .local v1, "e":Ljava/io/IOException;
    invoke-virtual {v1}, Ljava/io/IOException;->printStackTrace()V

    goto :goto_4d

    .line 212
    .end local v1    # "e":Ljava/io/IOException;
    :catchall_59
    move-exception v6

    :goto_5a
    if-eqz v4, :cond_5f

    .line 215
    :try_start_5c
    invoke-virtual {v4}, Ljava/io/FileOutputStream;->close()V
    :try_end_5f
    .catch Ljava/io/IOException; {:try_start_5c .. :try_end_5f} :catch_60

    .line 220
    :cond_5f
    :goto_5f
    throw v6

    .line 217
    :catch_60
    move-exception v1

    .line 219
    .restart local v1    # "e":Ljava/io/IOException;
    invoke-virtual {v1}, Ljava/io/IOException;->printStackTrace()V

    goto :goto_5f

    .line 212
    .end local v1    # "e":Ljava/io/IOException;
    .end local v4    # "out":Ljava/io/FileOutputStream;
    .restart local v5    # "out":Ljava/io/FileOutputStream;
    :catchall_65
    move-exception v6

    move-object v4, v5

    .end local v5    # "out":Ljava/io/FileOutputStream;
    .restart local v4    # "out":Ljava/io/FileOutputStream;
    goto :goto_5a

    .line 203
    :catch_68
    move-exception v1

    goto :goto_34
.end method

.method static storeMraidUrl(Landroid/content/Context;Ljava/lang/String;)V
    .registers 6
    .param p0, "context"    # Landroid/content/Context;
    .param p1, "url"    # Ljava/lang/String;

    .prologue
    .line 122
    invoke-static {p1}, Landroid/text/TextUtils;->isEmpty(Ljava/lang/CharSequence;)Z

    move-result v2

    if-nez v2, :cond_19

    .line 124
    const-string v2, "MillennialMediaSettings"

    const/4 v3, 0x0

    invoke-virtual {p0, v2, v3}, Landroid/content/Context;->getSharedPreferences(Ljava/lang/String;I)Landroid/content/SharedPreferences;

    move-result-object v1

    .line 125
    .local v1, "prefs":Landroid/content/SharedPreferences;
    invoke-interface {v1}, Landroid/content/SharedPreferences;->edit()Landroid/content/SharedPreferences$Editor;

    move-result-object v0

    .line 126
    .local v0, "editor":Landroid/content/SharedPreferences$Editor;
    const-string v2, "KEY_MMJS_URL"

    invoke-interface {v0, v2, p1}, Landroid/content/SharedPreferences$Editor;->putString(Ljava/lang/String;Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;

    .line 127
    invoke-interface {v0}, Landroid/content/SharedPreferences$Editor;->commit()Z

    .line 129
    .end local v0    # "editor":Landroid/content/SharedPreferences$Editor;
    .end local v1    # "prefs":Landroid/content/SharedPreferences;
    :cond_19
    return-void
.end method
